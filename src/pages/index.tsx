import Head from "next/head";
import styles from "@/styles/Home.module.css";
import { useState, useEffect } from "react";
import { Box, Grid, Card, TextField, Button, Typography } from "@mui/material";
import ChatGpt from "../components/chatGpt";
import people from "../assets/people.png";
import ai from "../assets/ai.png";
import Image from "next/image";
import { Configuration, OpenAIApi } from "openai";

export default function Home() {
  const [file, setFile] = useState("");
  const [transcription, setTranscription] = useState<any>("");
  const [lines, setLines] = useState<any[]>([]);
  const [newQuestion, setNewQuestion] = useState("");
  const [storedValues, setStoredValues] = useState<any>([]);

  let formatedText = lines.toString();

  const configuration = new Configuration({
    apiKey: "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",
  });

  const openai = new OpenAIApi(configuration);

  useEffect(() => {
    setLines(transcription.split("."));
  }, [transcription]);
  const transcribe = async () => {
    try {
      const response = await fetch("/api/transcribe", {
        method: "POST",
        body: JSON.stringify({
          url: file,
        }),
      });
      const received = await response.json();
      const data = JSON.parse(received);
      const transcription =
        data.results.channels[0].alternatives[0].paragraphs.transcript;
      setTranscription(transcription);
    } catch (error) {
      console.error(error);
    }
  };

  const generateResponse = async () => {
    let options = {
      model: "text-davinci-003",
      temperature: 0,
      max_tokens: 100,
      top_p: 1,
      frequency_penalty: 0.0,
      presence_penalty: 0.0,
      stop: ["/"],
    };

    let completeOptions = {
      ...options,
      prompt: `Narrate the following paragraph like ${newQuestion}    
       ${formatedText}`,
    };

    const response = await openai.createCompletion(completeOptions);

    if (response.data.choices) {
      setStoredValues([
        {
          question: newQuestion,
          answer: response.data.choices[0].text,
        },
        ...storedValues,
      ]);
      setNewQuestion("");
    }
  };

  return (
    <>
      <Head>
        <title>Audio Converter</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <Box className="background"></Box>

        <form>
          {/* <input
            onChange={(e) => setFile(e.target.value)}
            type="text"
            id="audio-file"
            name="audio-file"
            required
          /> */}

          <Box sx={{ position: "absolute", right: "20%", top: "30%" }}>
            <TextField
              id="Please Enter Audio Url"
              onChange={(e) => setFile(e.target.value)}
              label="Please Enter Audio Url"
              type="text"
              sx={{
                color: "#fff",
                "& .css-1n4twyu-MuiInputBase-input-MuiOutlinedInput-input": {
                  color: "#fff !important",
                },
              }}
              color="warning"
              size="small"
              error
              variant="outlined"
            />
            <Button
              variant="contained"
              type="button"
              sx={{ ml: -2, background: "#D32D15", height: "40px" }}
              color="warning"
              onClick={transcribe}
              className={styles.button}
            >
              Transcribe
            </Button>
          </Box>
        </form>
        {/* <form>
          <label htmlFor="audio-file">Link to Audio </label>
          <input
            onChange={(e) => setFile(e.target.value)}
            type="text"
            id="audio-file"
            name="audio-file"
            required
          />
          <button type="button" onClick={transcribe} className={styles.button}>
            Transcribe
          </button>
        </form>
        {transcription && (
          <div className={styles.transcript} id="new-transcription">
            {lines.map((line, index) => {
              if (line.startsWith("Speaker 0:")) {
                return <p key={index}>{line}</p>;
              } else {
                return <p key={index}>{line}</p>;
              }
            })}
          </div>
        )}

        <ChatGpt lines={lines} /> */}

        <Card sx={{ mt: -50, height: "50vh" }}>
          <Box sx={{ display: "flex", justifyContent: "space-between", p: 3 }}>
            <Typography variant="h5" sx={{ p: 2, fontWeight: "600" }}>
              Generated By DeepGram
            </Typography>
            <Box>
              <TextField
                id="Please Enter Audio Url"
                value={newQuestion}
                onChange={(e) => setNewQuestion(e.target.value)}
                label="Please enter any auther name"
                type="text"
                color="warning"
                size="small"
                error
                variant="outlined"
              />
              <Button
                variant="contained"
                type="button"
                sx={{ ml: -2, background: "#D32D15", height: "40px" }}
                color="warning"
                onClick={() => generateResponse()}
                className={styles.button}
              >
                Transcribe
              </Button>
            </Box>
          </Box>
          <Box sx={{ display: "flex" }}>
            <Box sx={{ p: 3, overflow: "auto", height: "50vh" }}>
              {lines.map((line, index) => {
                if (line.startsWith("Speaker 0:")) {
                  return <p key={index}>{line}</p>;
                } else {
                  return <p key={index}>{line}</p>;
                }
              })}
            </Box>

            <Box sx={{ p: 3, overflow: "auto", height: "50vh" }}>
              {storedValues.map((value: any, index: any) => {
                return (
                  <div className="answer-section" key={index}>
                    <p className="question">{value.question}</p>
                    <p className="answer">{value.answer}</p>
                    <div className="copy-icon">
                      <i className="fa-solid fa-copy"></i>
                    </div>
                  </div>
                );
              })}
            </Box>
          </Box>
        </Card>
      </main>
    </>
  );
}
